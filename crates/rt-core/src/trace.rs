//! Types and traits used to construct stack traces.

/// Stores WebAssembly-specific information for a native stack frame corresponding to a Rust
/// function generated by `wasm2rs`.
#[derive(Clone, Copy, Debug)]
#[non_exhaustive]
pub struct WasmFrame {
    /// Indicates the WebAssembly function that a native stack frame refers to.
    pub symbol: &'static crate::symbol::WasmSymbol,
    /// A byte offset from the start of the [code section entry] to the WebAssembly instruction.
    ///
    /// [code section entry]: crate::symbol::WasmSymbolKind::Defined::offset
    pub offset: u32,
    //location: &'static struct FileLocation { file: &'static str, line: u32, column: u32 },
}

impl WasmFrame {
    /// Creates a new stack frame with a [`WasmSymbol`] and a byte offset to the original
    /// WebAssembly instruction.
    ///
    /// Calls to this function are emitted when `wasm2rs` is configured to include stack trace
    /// information in the translated code.
    ///
    /// [`WasmSymbol`]: crate::symbol::WasmSymbol
    pub const fn new(symbol: &'static crate::symbol::WasmSymbol, offset: u32) -> Self {
        Self { symbol, offset }
    }
}

impl core::fmt::Display for WasmFrame {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        write!(f, "{} @ {:#X}", self.symbol, self.offset)
    }
}

/// Trait for collecting a stack trace of [`WasmFrame`]s.
pub trait Trace {
    /// Appends a WebAssembly stack trace frame to the stack trace, if it has one.
    fn push_wasm_frame(self, frame: &'static WasmFrame) -> Self
    where
        Self: Sized,
    {
        let _ = frame;
        self
    }
}

#[cfg(feature = "anyhow")]
impl Trace for anyhow::Error {
    fn push_wasm_frame(self, frame: &'static WasmFrame) -> Self {
        self.context(frame)
    }
}

/// Helper trait for attaching additional [`WasmFrame`]s to a stack trace within a [`Result`].
pub trait UnwindWith<T, E: Trace> {
    /// Appends a WebAssembly stack frame if the [`Result`] is [`Err`].
    fn unwind_with(self, frame: &'static WasmFrame) -> Result<T, E>;
}

impl<T, E: Trace> UnwindWith<T, E> for Result<T, E> {
    fn unwind_with(self, frame: &'static WasmFrame) -> Result<T, E> {
        match self {
            Ok(ok) => Ok(ok),
            Err(err) => Err(err.push_wasm_frame(frame)),
        }
    }
}

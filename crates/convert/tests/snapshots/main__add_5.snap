---
source: crates/convert/tests/main.rs
expression: "String::from_utf8_lossy(&rust)"
---
// Generated by wasm2rs 0.1.0
macro_rules! wasm {
    ($vis:vis mod $module:ident use $(:: $embedder_start:ident ::)? $($embedder_more:ident)::+) => {

#[allow(non_snake_case)]
#[allow(dead_code)]
#[allow(unreachable_code)]
#[allow(unreachable_pub)]
$vis mod $module {

use $(::$embedder_start::)? $($embedder_more)::+ as embedder;
use embedder::rt::trap::TrapWith as _;

pub struct Instance {
    pub imports: embedder::Imports,
}

impl Instance {

    pub fn instantiate(store: embedder::Store) -> ::core::result::Result<embedder::Module<Self>, embedder::Trap> {
        let allocated = Self {
            imports: store.imports,
        };
        let mut module = embedder::rt::store::AllocateModule::allocate(store.instance, allocated);
        Ok(module)
    }

fn _f0(mut _l0: i32) -> i32 {
    i32::wrapping_add(_l0, 5i32)
}

pub fn add_five(&self, mut _l0: i32) -> ::core::result::Result<i32, embedder::Trap> {
    Ok(Self::_f0(_l0))
}

} // impl Instance

} // mod $module

    }
}

//! Provides the implementation of stack trace capturing for [`wasm2rs_rt`](crate).
//!
//! # Implementation Details
//!
//! The [`backtrace`] optional dependency provides the implementation for the collection of stack
//! traces, and requires the `std` feature.
//!
//! If the `backtrace` feature is not enabled, or if it does not support the target platform, then
//! the stack trace collection methods do nothing.

mod wasm_symbol;

pub use wasm_symbol::{WasmSymbol, WasmSymbolTable, WasmSymbolTableIter};
pub use backtrace::{BacktraceSymbol as NativeSymbol, BacktraceFrame as NativeStackTraceFrame};

/// Stores WebAssembly-specific information for a [`StackTraceFrame`] corresponding to a Rust
/// function generated by `wasm2rs`.
#[derive(Clone, Debug)]
#[non_exhaustive]
pub struct WasmStackTraceFrame {
    /// Indicates the WebAssembly function that a [`StackTraceFrame`] refers to.
    pub symbol: &'static WasmSymbol,
    /// An offset from the start of the [code section entry] to the WebAssembly instruction.
    ///
    /// [code section entry]: WasmSymbol::offset
    pub offset: Option<u32>,
}

/// Represents a frame in a [`StackTrace`].
#[derive(Clone, Debug)]
pub struct StackTraceFrame {
    #[cfg(feature = "backtrace")]
    native_frame: NativeStackTraceFrame,
    #[cfg(feature = "backtrace")]
    wasm_frames: alloc::vec::Vec<Option<WasmStackTraceFrame>>,
    #[cfg(not(feature = "backtrace"))]
    wasm_frame: WasmStackTraceFrame,
}

/// Represents a stack trace.
#[derive(Clone)]
#[cfg_attr(feature = "backtrace", derive(Debug))]
pub struct StackTrace {
    #[cfg(feature = "backtrace")]
    native_frames: backtrace::Backtrace,
    wasm_symbols: &'static [&'static WasmSymbolTable],
}

impl StackTrace {
    //pub const EMPTY: Self = Self {};

    /// Captures a [`StackTrace`], using the specified list of [`WasmSymbolTable`]s to determine
    /// which [`NativeSymbol`]s correspond to a [`WasmSymbol`].
    ///
    /// Symbol information is only collected when 
    pub fn capture(wasm_symbols: &'static [&'static WasmSymbolTable]) {

    }
}

#[cfg(not(feature = "backtrace"))]
impl core::fmt::Debug for StackTrace {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("StackTrace").finish_non_exhaustive();
    }
}
